{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include "standcl.h"\
\
#ifndef MAKE_BIG\
#define MAKE_BIG 10 //\uc0\u1076 \u1083 \u1103  \u1091 \u1074 \u1077 \u1083 \u1080 \u1095 \u1077 \u1085 \u1080 \u1077  \u1088 \u1072 \u1079 \u1084 \u1077 \u1088 \u1072  \u1080  \u1090 .\u1087 .\
#endif\
\
void recount_length(text_s *text)\{\
    int i;\
    for (i = 0; i < text->quant; i++)\{\
        text->sent[i].length = wcslen(text->sent[i].str);\
    \}\
\}\
\
//\uc0\u1091 \u1076 \u1072 \u1083 \u1077 \u1085 \u1080 \u1077  \u1087 \u1086 \u1074 \u1090 \u1086 \u1088 \u1103 \u1102 \u1097 \u1080 \u1093 \u1089 \u1103  \u1087 \u1088 \u1077 \u1076 \u1083 \u1086 \u1078 \u1077 \u1085 \u1080 \u1081 \
int delete_repeat(text_s *text)\{\
    int numb_string = 0; //\uc0\u1085 \u1086 \u1084 \u1077 \u1088  \u1090 \u1077 \u1082 \u1091 \u1097 \u1077 \u1081  \u1086 \u1073 \u1088 \u1072 \u1073 \u1072 \u1090 \u1099 \u1074 \u1072 \u1077 \u1084 \u1086 \u1081  \u1089 \u1090 \u1088 \u1086 \u1082 \u1080 \
    int i, j;\
    wchar_t *str1 = NULL;\
    wchar_t *str2 = NULL; //\uc0\u1074 \u1088 \u1077 \u1084 \u1077 \u1085 \u1085 \u1099 \u1077  \u1089 \u1090 \u1088 \u1086 \u1082 \u1080  \u1076 \u1083 \u1103  \u1085 \u1080 \u1078 \u1085 \u1077 \u1075 \u1086  \u1080 \u1085 \u1076 \u1077 \u1082 \u1089 \u1072  \u1080  \u1089 \u1082 \u1072 \u1085 \u1080 \u1088 \u1086 \u1074 \u1072 \u1085 \u1080 \u1103 \
    while(numb_string != text->quant)\{\
        //\uc0\u1088 \u1072 \u1073 \u1086 \u1090 \u1072  \u1089  1-\u1086 \u1081  \u1089 \u1088 \u1072 \u1074 \u1085 \u1080 \u1074 \u1072 \u1077 \u1084 \u1086 \u1081  \u1089 \u1090 \u1088 \u1086 \u1082 \u1086 \u1081 \
        str1 = (wchar_t *)malloc((wcslen(text->sent[numb_string].str) + 1) * sizeof(wchar_t));\
        if (!str1)\
            return 1;\
        wmemcpy(str1, text->sent[numb_string].str, wcslen(text->sent[numb_string].str) + 1);\
        for (i = 0; i < wcslen(str1); i++)\
            str1[i] = towlower(str1[i]);\
        //\uc0\u1087 \u1088 \u1086 \u1074 \u1077 \u1088 \u1103 \u1077 \u1084  \u1087 \u1086 \u1089 \u1083 \u1077 \u1076 \u1091 \u1102 \u1097 \u1080 \u1077  \u1089 \u1090 \u1088 \u1086 \u1082 \u1080  \u1085 \u1072  \u1088 \u1072 \u1074 \u1077 \u1085 \u1089 \u1090 \u1074 \u1086 \
        for (i = numb_string + 1; i < text->quant; i++)\{\
            //\uc0\u1088 \u1072 \u1073 \u1086 \u1090 \u1072  \u1089  2-\u1086 \u1081  \u1089 \u1088 \u1072 \u1074 \u1085 \u1080 \u1074 \u1072 \u1077 \u1084 \u1086 \u1081  \u1089 \u1090 \u1088 \u1086 \u1082 \u1086 \u1081 \
            str2 = (wchar_t *)malloc((wcslen(text->sent[i].str) + 1) * sizeof(wchar_t));\
            if (!str2)\
                return 1;\
            wmemcpy(str2, text->sent[i].str, wcslen(text->sent[i].str) + 1);\
            for (j = 0; j < wcslen(str2); j++)\
                str2[j] = towlower(str2[j]);\
            //\uc0\u1087 \u1088 \u1086 \u1074 \u1077 \u1088 \u1082 \u1072  \u1085 \u1072  \u1088 \u1072 \u1074 \u1077 \u1085 \u1089 \u1090 \u1074 \u1086 \
            if ( !( wcscmp(str1, str2)) )\{\
                for (j = i; j < text->quant - 1; j++)\{ //\uc0\u1085 \u1072  \u1101 \u1083 . \u1084 \u1077 \u1085 \u1100 \u1096 \u1077 , \u1090 .\u1082 .\u1087 \u1086 \u1089 \u1083 \u1077 \u1076 \u1085 \u1080 \u1081  \u1091 \u1078 \u1077  \u1085 \u1077  \u1088 \u1072 \u1089 \u1089 \u1084 \u1072 \u1090 \u1088 \u1080 \u1074 \u1072 \u1077 \u1084 \
                    text->sent[j].str = (wchar_t *)realloc(text->sent[j].str, (wcslen(text->sent[j + 1].str) + 1) * sizeof(wchar_t)); //\uc0\u1085 \u1072  1 \u1073 \u1086 \u1083 \u1100 \u1096 \u1077 , \u1090 .\u1082 . \u1092 \u1091 -\u1080 \u1103  \u1085 \u1077  \u1091 \u1095 \u1080 \u1090 \u1099 \u1074 \u1072 \u1077 \u1090  \u1090 \u1077 \u1088 \u1084 . 0\
                    if (!text->sent[j].str)\
                        return 1;\
                    wmemcpy(text->sent[j].str, text->sent[j + 1].str, wcslen(text->sent[j + 1].str) + 1);\
                \}\
                free(text->sent[text->quant - 1].str); //\uc0\u1090 .\u1082 . \u1080 \u1085 \u1076 \u1077 \u1082 \u1089  \u1085 \u1072  1 \u1084 \u1077 \u1085 \u1100 \u1096 \u1077 , \u1095 \u1077 \u1084  \u1082 \u1086 \u1083 -\u1074 \u1086 \
                text->sent[text->quant - 1].str = NULL;\
                text->quant--;\
            \}\
            free(str2);\
        \}\
        free(str1);\
        recount_length(text);\
        numb_string++;\
    \}\
    return 0;\
\}\
\
//\uc0\u1088 \u1072 \u1079 \u1076 \u1077 \u1083 \u1103 \u1077 \u1084  \u1089 \u1090 \u1088 \u1086 \u1082 \u1091  \u1085 \u1072  \u1089 \u1083 \u1086 \u1074 \u1072 \
int split_words(text_s *text)\{\
    int i, j;\
    int avl_words;\
    wchar_t *temp;\
    wchar_t *token;\
    wchar_t *buffer;\
    for(i = 0; i < text->quant; i++)\{\
        avl_words = MAKE_BIG; //\uc0\u1076 \u1086 \u1089 \u1090 \u1091 \u1087 \u1085 \u1086 \u1077  \u1082 \u1086 \u1083 -\u1074 \u1086  \u1089 \u1083 \u1086 \u1074 \
        text->sent[i].splword = (wchar_t **)malloc(avl_words * sizeof(wchar_t *)); //\uc0\u1074 \u1099 \u1076 \u1077 \u1083 \u1077 \u1085 \u1080 \u1077  \u1087 \u1072 \u1084 \u1103 \u1090 \u1080  \u1085 \u1072  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074  \u1089 \u1083 \u1086 \u1074 \
        text->sent[i].count_words = 0; //\uc0\u1090 \u1077 \u1082 \u1091 \u1097 \u1077 \u1077  \u1082 \u1086 \u1083 -\u1074 \u1086  \u1089 \u1083 \u1086 \u1074 \
        //\uc0\u1087 \u1077 \u1088 \u1077 \u1082 \u1086 \u1087 \u1080 \u1088 \u1086 \u1074 \u1072 \u1083 \u1080  \u1074 \u1086  \u1074 \u1088 \u1077 \u1084 \u1077 \u1085 \u1085 \u1091 \u1102  \u1089 \u1090 \u1088 \u1086 \u1082 \u1091 , \u1090 .\u1082 . wcstok \u1084 \u1077 \u1085 \u1103 \u1077 \u1090  \u1080 \u1089 \u1093 \u1086 \u1076 \u1085 \u1091 \u1102 \
        temp = (wchar_t *)malloc((text->sent[i].length + 1) * sizeof(wchar_t));\
        if (!temp)\
            return 1;\
        wmemmove(temp, text->sent[i].str, text->sent[i].length + 1);\
\
        token = wcstok(temp, L" ,.", &buffer); //\uc0\u1090 \u1086 \u1095 \u1082 \u1072 , \u1095 \u1090 \u1086 \u1073 \u1099  \u1086 \u1090 \u1076 \u1077 \u1083 \u1100 \u1085 \u1086  \u1085 \u1077  \u1088 \u1072 \u1073 \u1086 \u1090 \u1072 \u1090 \u1100  \u1089  \u1087 \u1086 \u1089 \u1083 \u1077 \u1076 \u1085 \u1080 \u1084  \u1089 \u1083 \u1086 \u1074 \u1086 \u1084 \
        while (token != NULL)\{\
            if (avl_words <= text->sent[i].count_words)\{\
                avl_words += MAKE_BIG;\
                void *tmp = realloc(text->sent[i].splword, avl_words * sizeof(wchar_t *));\
                if (!tmp)\
                    return 1;\
                text->sent[i].splword = (wchar_t **)tmp;\
            \}\
            text->sent[i].splword[text->sent[i].count_words] = (wchar_t *)malloc((wcslen(token) + 1) * sizeof(wchar_t));\
            if (!text->sent[i].splword[text->sent[i].count_words])\
                return 1;\
            wmemmove(text->sent[i].splword[text->sent[i].count_words], token, wcslen(token) + 1);\
            //\uc0\u1087 \u1088 \u1080 \u1074 \u1077 \u1076 \u1077 \u1085 \u1080 \u1077  \u1089 \u1083 \u1086 \u1074  \u1082  \u1085 \u1080 \u1078 \u1085 \u1077 \u1084 \u1091  \u1088 \u1077 \u1075 \u1080 \u1089 \u1090 \u1088 \u1091 \
            for (j = 0; j < wcslen(text->sent[i].splword[text->sent[i].count_words]); j++)\
                text->sent[i].splword[text->sent[i].count_words][j] = towlower(text->sent[i].splword[text->sent[i].count_words][j]);\
            text->sent[i].count_words++;\
            token = wcstok(NULL, L" ,.", &buffer);\
        \}\
        free(temp);\
        temp = NULL;\
        token = NULL;\
        buffer = NULL;\
    \}\
    return 0;\
\}\
}